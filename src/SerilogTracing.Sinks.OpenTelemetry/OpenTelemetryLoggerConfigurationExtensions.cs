// Copyright © Serilog Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Serilog;
using Serilog.Configuration;
using SerilogTracing.Sinks.OpenTelemetry;
using OpenTelemetrySinkOptions = SerilogTracing.Sinks.OpenTelemetry.OpenTelemetrySinkOptions;
using BatchedOpenTelemetrySinkOptions = SerilogTracing.Sinks.OpenTelemetry.BatchedOpenTelemetrySinkOptions;

// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable InvokeAsExtensionMethod

namespace SerilogTracing;

/// <summary>
/// Adds OpenTelemetry sink configuration methods to <see cref="LoggerSinkConfiguration"/>.
/// </summary>
public static class OpenTelemetryLoggerConfigurationExtensions
{
    static void ApplyOptions(BatchedOpenTelemetrySinkOptions options, Serilog.Sinks.OpenTelemetry.BatchedOpenTelemetrySinkOptions adaptedOptions)
    {
        adaptedOptions.BatchingOptions.BatchSizeLimit = options.BatchingOptions.BatchSizeLimit;
        adaptedOptions.BatchingOptions.QueueLimit = options.BatchingOptions.QueueLimit;
        adaptedOptions.BatchingOptions.BufferingTimeLimit = options.BatchingOptions.BufferingTimeLimit;
        adaptedOptions.BatchingOptions.EagerlyEmitFirstEvent = options.BatchingOptions.EagerlyEmitFirstEvent;
        ApplyOptions((OpenTelemetrySinkOptions)options, adaptedOptions);
    }

    static void ApplyOptions(OpenTelemetrySinkOptions options, Serilog.Sinks.OpenTelemetry.OpenTelemetrySinkOptions adaptedOptions)
    {
        adaptedOptions.Endpoint = null;
        adaptedOptions.LogsEndpoint = options.LogsEndpoint;
        adaptedOptions.TracesEndpoint = options.TracesEndpoint;
        adaptedOptions.Protocol = (Serilog.Sinks.OpenTelemetry.OtlpProtocol)(int)options.Protocol;
        adaptedOptions.LevelSwitch = options.LevelSwitch;
        adaptedOptions.FormatProvider = options.FormatProvider;
        adaptedOptions.IncludedData = (Serilog.Sinks.OpenTelemetry.IncludedData)(int)options.IncludedData;
        adaptedOptions.HttpMessageHandler = options.HttpMessageHandler;
        adaptedOptions.RestrictedToMinimumLevel = options.RestrictedToMinimumLevel;
        adaptedOptions.ResourceAttributes = options.ResourceAttributes;
        adaptedOptions.Headers = options.Headers;
    }

    /// <summary>
    /// Send log events to an OTLP exporter.
    /// </summary>
    /// <param name="loggerSinkConfiguration">
    /// The `WriteTo` configuration object.
    /// </param>
    /// <param name="configure">The configuration callback.</param>
    [Obsolete("The functionality of this sink is now directly supported in Serilog.Sinks.OpenTelemetry; use that package instead.")]
    public static LoggerConfiguration OpenTelemetry(
        this LoggerSinkConfiguration loggerSinkConfiguration,
        Action<BatchedOpenTelemetrySinkOptions> configure)
    {
        if (configure == null) throw new ArgumentNullException(nameof(configure));

        return Serilog.OpenTelemetryLoggerConfigurationExtensions.OpenTelemetry(
            loggerSinkConfiguration,
            adaptedOptions =>
            {
                var options = new BatchedOpenTelemetrySinkOptions();
                configure(options);
                ApplyOptions(options, adaptedOptions);
            },
            ignoreEnvironment: true);
    }

    /// <summary>
    /// Send log events to an OTLP exporter.
    /// </summary>
    /// <param name="loggerSinkConfiguration">
    /// The `WriteTo` configuration object.
    /// </param>
    /// <param name="logsEndpoint">
    /// The full URL of the OTLP logs exporter endpoint. A null value indicates that
    /// this sink should not process logs.
    /// </param>
    /// <param name="tracesEndpoint">
    /// The full URL of the OTLP traces exporter endpoint. A null value indicates that
    /// this sink should not process traces.
    /// </param>
    /// <param name="protocol">
    /// The OTLP protocol to use.
    /// </param>
    /// <param name="headers">
    /// Headers to send with network requests.
    /// </param>
    /// <param name="resourceAttributes">
    /// A attributes of the resource attached to the logs generated by the sink. The values must be simple primitive
    /// values: integers, doubles, strings, or booleans. Other values will be silently ignored.
    /// </param>
    /// <returns>Logger configuration, allowing configuration to continue.</returns>
    [Obsolete("The functionality of this sink is now directly supported in Serilog.Sinks.OpenTelemetry; use that package instead.")]
    public static LoggerConfiguration OpenTelemetry(
        this LoggerSinkConfiguration loggerSinkConfiguration,
        string? logsEndpoint,
        string? tracesEndpoint,
        OtlpProtocol protocol = OpenTelemetrySinkOptions.DefaultProtocol,
        IDictionary<string, string>? headers = null,
        IDictionary<string, object>? resourceAttributes = null)
    {
        if (loggerSinkConfiguration == null) throw new ArgumentNullException(nameof(loggerSinkConfiguration));

        return Serilog.OpenTelemetryLoggerConfigurationExtensions.OpenTelemetry(
            loggerSinkConfiguration,
            adaptedOptions =>
            {
                var options = new BatchedOpenTelemetrySinkOptions
                {
                    LogsEndpoint = logsEndpoint,
                    TracesEndpoint = tracesEndpoint,
                    Protocol = protocol,
                    Headers = headers ?? new Dictionary<string, string>(),
                    ResourceAttributes = resourceAttributes ?? new Dictionary<string, object>()
                };
                ApplyOptions(options, adaptedOptions);
            },
            ignoreEnvironment: true);
    }

    /// <summary>
    /// Audit to an OTLP exporter, waiting for each event to be acknowledged, and propagating errors to the caller.
    /// </summary>
    /// <param name="loggerAuditSinkConfiguration">
    /// The `AuditTo` configuration object.
    /// </param>
    /// <param name="configure">The configuration callback.</param>
    [Obsolete("The functionality of this sink is now directly supported in Serilog.Sinks.OpenTelemetry; use that package instead.")]
    public static LoggerConfiguration OpenTelemetry(
        this LoggerAuditSinkConfiguration loggerAuditSinkConfiguration,
        Action<OpenTelemetrySinkOptions> configure)
    {
        if (configure == null) throw new ArgumentNullException(nameof(configure));

        return Serilog.OpenTelemetryLoggerConfigurationExtensions.OpenTelemetry(
            loggerAuditSinkConfiguration,
            adaptedOptions =>
            {
                var options = new BatchedOpenTelemetrySinkOptions();
                configure(options);
                ApplyOptions(options, adaptedOptions);
            });
    }

    /// <summary>
    /// Audit to an OTLP exporter, waiting for each event to be acknowledged, and propagating errors to the caller.
    /// </summary>
    /// <param name="loggerAuditSinkConfiguration">
    /// The `AuditTo` configuration object.
    /// </param>
    /// <param name="logsEndpoint">
    /// The full URL of the OTLP logs exporter endpoint. A null value indicates that
    /// this sink should not process logs.
    /// </param>
    /// <param name="tracesEndpoint">
    /// The full URL of the OTLP traces exporter endpoint. A null value indicates that
    /// this sink should not process traces.
    /// </param>
    /// <param name="protocol">
    /// The OTLP protocol to use.
    /// </param>
    /// <param name="headers">
    /// Headers to send with network requests.
    /// </param>
    /// <param name="resourceAttributes">
    /// A attributes of the resource attached to the logs generated by the sink. The values must be simple primitive
    /// values: integers, doubles, strings, or booleans. Other values will be silently ignored.
    /// </param>
    /// <returns>Logger configuration, allowing configuration to continue.</returns>
    [Obsolete("The functionality of this sink is now directly supported in Serilog.Sinks.OpenTelemetry; use that package instead.")]
    public static LoggerConfiguration OpenTelemetry(
        this LoggerAuditSinkConfiguration loggerAuditSinkConfiguration,
        string? logsEndpoint,
        string? tracesEndpoint,
        OtlpProtocol protocol = OpenTelemetrySinkOptions.DefaultProtocol,
        IDictionary<string, string>? headers = null,
        IDictionary<string, object>? resourceAttributes = null)
    {
        if (loggerAuditSinkConfiguration == null) throw new ArgumentNullException(nameof(loggerAuditSinkConfiguration));
        
        return Serilog.OpenTelemetryLoggerConfigurationExtensions.OpenTelemetry(
            loggerAuditSinkConfiguration,
            adaptedOptions =>
            {
                var options = new BatchedOpenTelemetrySinkOptions
                {
                    LogsEndpoint = logsEndpoint,
                    TracesEndpoint = tracesEndpoint,
                    Protocol = protocol,
                    Headers = headers ?? new Dictionary<string, string>(),
                    ResourceAttributes = resourceAttributes ?? new Dictionary<string, object>()
                };
                ApplyOptions(options, adaptedOptions);
            });
    }
}