namespace SerilogTracing
{
    public class ActivityListenerConfiguration
    {
        public ActivityListenerConfiguration() { }
        public SerilogTracing.Configuration.ActivityListenerActivityEventsConfiguration ActivityEvents { get; }
        public SerilogTracing.Configuration.ActivityListenerInitialLevelConfiguration InitialLevel { get; }
        public SerilogTracing.Configuration.ActivityListenerInstrumentationConfiguration Instrument { get; }
        public SerilogTracing.Configuration.ActivityListenerSamplingConfiguration Sample { get; }
        public System.IDisposable TraceTo(Serilog.ILogger logger) { }
        public System.IDisposable TraceToSharedLogger() { }
    }
    public static class ActivityListenerInstrumentationConfigurationHttpClientExtensions
    {
        public static SerilogTracing.ActivityListenerConfiguration HttpClientRequests(this SerilogTracing.Configuration.ActivityListenerInstrumentationConfiguration configuration) { }
        public static SerilogTracing.ActivityListenerConfiguration HttpClientRequests(this SerilogTracing.Configuration.ActivityListenerInstrumentationConfiguration configuration, System.Action<SerilogTracing.Instrumentation.HttpClient.HttpRequestOutActivityInstrumentationOptions> configure) { }
    }
    public sealed class LoggerActivity : System.IDisposable
    {
        public System.Diagnostics.Activity? Activity { get; }
        public static SerilogTracing.LoggerActivity None { get; }
        public void AddProperty(string propertyName, object? value, bool destructureObjects = false) { }
        public void Complete(Serilog.Events.LogEventLevel? level = default, System.Exception? exception = null) { }
        public void Dispose() { }
    }
    public static class LoggerTracingExtensions
    {
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, string messageTemplate) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, Serilog.Events.LogEventLevel level, string messageTemplate) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, string messageTemplate, params object?[]? propertyValues) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, Serilog.Events.LogEventLevel level, string messageTemplate, params object?[]? propertyValues) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, System.Diagnostics.ActivityKind kind, System.Diagnostics.ActivityContext parentContext, string messageTemplate) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, System.Diagnostics.ActivityKind kind, System.Diagnostics.ActivityContext parentContext, Serilog.Events.LogEventLevel level, string messageTemplate) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, System.Diagnostics.ActivityKind kind, System.Diagnostics.ActivityContext parentContext, string messageTemplate, params object?[]? propertyValues) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity(this Serilog.ILogger logger, System.Diagnostics.ActivityKind kind, System.Diagnostics.ActivityContext parentContext, Serilog.Events.LogEventLevel level, string messageTemplate, params object?[]? propertyValues) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity<T>(this Serilog.ILogger logger, string messageTemplate, T propertyValue) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity<T>(this Serilog.ILogger logger, Serilog.Events.LogEventLevel level, string messageTemplate, T propertyValue) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity<T0, T1>(this Serilog.ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity<T0, T1>(this Serilog.ILogger logger, Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity<T0, T1, T2>(this Serilog.ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }
        [Serilog.Core.MessageTemplateFormatMethod("messageTemplate")]
        public static SerilogTracing.LoggerActivity StartActivity<T0, T1, T2>(this Serilog.ILogger logger, Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }
    }
    [System.Obsolete("This type has been renamed to ActivityListenerConfiguration; use that name instea" +
        "d.")]
    public class TracingConfiguration
    {
        public TracingConfiguration() { }
        public SerilogTracing.Configuration.ActivityListenerInitialLevelConfiguration InitialLevel { get; }
        public SerilogTracing.Configuration.ActivityListenerInstrumentationConfiguration Instrument { get; }
        public SerilogTracing.Configuration.ActivityListenerSamplingConfiguration Sample { get; }
        public System.IDisposable EnableTracing(Serilog.ILogger? logger = null) { }
        public System.IDisposable TraceTo(Serilog.ILogger logger) { }
        public System.IDisposable TraceToSharedLogger() { }
    }
    public static class TracingLoggerEnrichmentConfigurationExtensions
    {
        public static Serilog.LoggerConfiguration WithSpanTiming(this Serilog.Configuration.LoggerEnrichmentConfiguration enrichment, string? propertyName = null) { }
        public static Serilog.LoggerConfiguration WithSpanTimingMilliseconds(this Serilog.Configuration.LoggerEnrichmentConfiguration enrichment, string? propertyName = null) { }
    }
}
namespace SerilogTracing.Configuration
{
    public class ActivityListenerActivityEventsConfiguration
    {
        public SerilogTracing.ActivityListenerConfiguration AsLogEvents() { }
    }
    public class ActivityListenerInitialLevelConfiguration
    {
        public SerilogTracing.ActivityListenerConfiguration Debug() { }
        public SerilogTracing.ActivityListenerConfiguration Error() { }
        public SerilogTracing.ActivityListenerConfiguration Fatal() { }
        public SerilogTracing.ActivityListenerConfiguration IgnoreChanges() { }
        public SerilogTracing.ActivityListenerConfiguration Information() { }
        public SerilogTracing.ActivityListenerConfiguration Is(Serilog.Events.LogEventLevel level) { }
        public SerilogTracing.ActivityListenerConfiguration Override(string activitySourceName, Serilog.Core.LoggingLevelSwitch levelSwitch) { }
        public SerilogTracing.ActivityListenerConfiguration Override(string activitySourceName, Serilog.Events.LogEventLevel level) { }
        public SerilogTracing.ActivityListenerConfiguration Verbose() { }
        public SerilogTracing.ActivityListenerConfiguration Warning() { }
    }
    public sealed class ActivityListenerInstrumentationConfiguration
    {
        public SerilogTracing.ActivityListenerConfiguration With(params SerilogTracing.Instrumentation.IActivityInstrumentor[] instrumentors) { }
        public SerilogTracing.ActivityListenerConfiguration With<TInstrumentor>()
            where TInstrumentor : SerilogTracing.Instrumentation.IActivityInstrumentor, new () { }
        public SerilogTracing.ActivityListenerConfiguration WithDefaultInstrumentation(bool withDefaults) { }
    }
    public class ActivityListenerSamplingConfiguration
    {
        public SerilogTracing.ActivityListenerConfiguration AllTraces() { }
        public SerilogTracing.ActivityListenerConfiguration OneTraceIn(ulong interval) { }
        public SerilogTracing.ActivityListenerConfiguration Using(System.Diagnostics.SampleActivity<System.Diagnostics.ActivityContext> sample) { }
    }
}
namespace SerilogTracing.Core
{
    public static class Constants
    {
        public const string ActivityEventPropertyName = "ActivityEvent";
        public const string ParentSpanIdPropertyName = "ParentSpanId";
        public const string SerilogTracingActivitySourceName = "SerilogTracing";
        public const string SpanKindPropertyName = "SpanKind";
        public const string SpanStartTimestampPropertyName = "SpanStartTimestamp";
    }
}
namespace SerilogTracing.Instrumentation
{
    public static class ActivityInstrumentation
    {
        public static void SetLogEventProperties(System.Diagnostics.Activity activity, params Serilog.Events.LogEventProperty[] properties) { }
        public static void SetLogEventProperties(System.Diagnostics.Activity activity, System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty> properties) { }
        public static void SetLogEventProperty(System.Diagnostics.Activity activity, Serilog.Events.LogEventProperty property) { }
        public static void SetLogEventProperty(System.Diagnostics.Activity activity, string propertyName, Serilog.Events.LogEventPropertyValue propertyValue) { }
        public static void SetMessageTemplateOverride(System.Diagnostics.Activity activity, Serilog.Events.MessageTemplate messageTemplate) { }
        public static bool TrySetException(System.Diagnostics.Activity activity, System.Exception exception) { }
    }
    public abstract class ActivitySourceInstrumentor : SerilogTracing.Instrumentation.IActivityInstrumentor
    {
        protected ActivitySourceInstrumentor() { }
        public virtual void InstrumentOnActivityStarted(System.Diagnostics.Activity activity) { }
        public virtual void InstrumentOnActivityStopped(System.Diagnostics.Activity activity) { }
        public abstract bool ShouldSubscribeTo(string activitySourceName);
    }
    public interface IActivityInstrumentor
    {
        void InstrumentActivity(System.Diagnostics.Activity activity, string eventName, object eventArgs);
        bool ShouldSubscribeTo(string diagnosticListenerName);
    }
    public interface IInstrumentationEventObserver
    {
        void OnNext(string eventName, object? eventArgs);
    }
    public class PropertyAccessor<T>
        where T :  notnull
    {
        public PropertyAccessor(string propertyName) { }
        public bool TryGetValue(object receiver, out T? value) { }
    }
}
namespace SerilogTracing.Instrumentation.HttpClient
{
    public class HttpRequestOutActivityInstrumentationOptions
    {
        public HttpRequestOutActivityInstrumentationOptions() { }
        public System.Func<System.Net.Http.HttpRequestMessage, System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty>> GetRequestProperties { get; set; }
        public System.Func<System.Net.Http.HttpResponseMessage?, System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty>> GetResponseProperties { get; set; }
        public System.Func<System.Net.Http.HttpResponseMessage, bool> IsErrorResponse { get; set; }
        public string MessageTemplate { get; set; }
    }
}